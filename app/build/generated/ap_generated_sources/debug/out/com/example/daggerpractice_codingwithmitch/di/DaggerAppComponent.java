// Generated by Dagger (https://dagger.dev).
package com.example.daggerpractice_codingwithmitch.di;

import android.app.Application;
import android.graphics.drawable.Drawable;
import androidx.lifecycle.ViewModel;
import com.bumptech.glide.RequestManager;
import com.example.daggerpractice_codingwithmitch.BaseApplication;
import com.example.daggerpractice_codingwithmitch.Network.auth.AuthApi;
import com.example.daggerpractice_codingwithmitch.di.auth.AuthModule_ProvideAuthApiFactory;
import com.example.daggerpractice_codingwithmitch.ui.auth.AuthActivity;
import com.example.daggerpractice_codingwithmitch.ui.auth.AuthActivity_MembersInjector;
import com.example.daggerpractice_codingwithmitch.ui.auth.AuthViewModel;
import com.example.daggerpractice_codingwithmitch.ui.auth.AuthViewModel_Factory;
import com.example.daggerpractice_codingwithmitch.viewmodels.ViewModelProviderFactory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final Application application;

  private Provider<ActivityBuilderModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory> authActivitySubcomponentFactoryProvider;

  private DaggerAppComponent(Application applicationParam) {
    this.application = applicationParam;
    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(AuthActivity.class, (Provider) authActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private Drawable drawable() {
    return AppModule_ProvideDrawableFactory.provideDrawable(application);
  }

  private RequestManager requestManager() {
    return AppModule_ProvideGlideInstanceFactory.provideGlideInstance(application, AppModule_ProvideRequestOptionsFactory.provideRequestOptions());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.authActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory get() {
        return new AuthActivitySubcomponentFactory();
      }
    };
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class AuthActivitySubcomponentFactory implements ActivityBuilderModule_ContributeAuthActivity.AuthActivitySubcomponent.Factory {
    @Override
    public ActivityBuilderModule_ContributeAuthActivity.AuthActivitySubcomponent create(
        AuthActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AuthActivitySubcomponentImpl(arg0);
    }
  }

  private final class AuthActivitySubcomponentImpl implements ActivityBuilderModule_ContributeAuthActivity.AuthActivitySubcomponent {
    private Provider<AuthApi> provideAuthApiProvider;

    private Provider<AuthViewModel> authViewModelProvider;

    private AuthActivitySubcomponentImpl(AuthActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(AuthViewModel.class, (Provider) authViewModelProvider);
    }

    private ViewModelProviderFactory viewModelProviderFactory() {
      return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivity arg0) {
      this.provideAuthApiProvider = AuthModule_ProvideAuthApiFactory.create(AppModule_ProvideRetrofitInstanceFactory.create());
      this.authViewModelProvider = AuthViewModel_Factory.create(provideAuthApiProvider);
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);
    }

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      AuthActivity_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
      AuthActivity_MembersInjector.injectLogo(instance, DaggerAppComponent.this.drawable());
      AuthActivity_MembersInjector.injectRequestManager(instance, DaggerAppComponent.this.requestManager());
      return instance;
    }
  }
}
